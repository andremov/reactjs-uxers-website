{"version":3,"sources":["assets/circle.svg","assets/letter-u.svg","Components/LoadComponent.js","Components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoadComponent","className","xmlns","viewBox","d","Component","MainComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,yHCI9BC,G,YAAb,8NAQQ,OACI,yBAAKC,UAAU,eACP,yBAAKA,UAAU,OAAOC,MAAM,6BAA6BC,QAAQ,qBAC7D,0BAAMC,EAAE,0bAEZ,yBAAKH,UAAU,SAASC,MAAM,6BAA6BC,QAAQ,mBAC/D,0BAAMC,EAAE,gFAdhC,GAAmCC,cCCtBC,EAAb,iLAEQ,OACI,6BACI,yBAAKL,UAAU,WANR,UAUP,kBAAC,EAAD,WARhB,GAAmCI,aCKpBE,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.193d0fa3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/circle.be819ced.svg\";","module.exports = __webpack_public_path__ + \"static/media/letter-u.584e457c.svg\";","import React, {Component} from 'react';\r\nimport circle from \"../assets/circle.svg\";\r\nimport letterU from \"../assets/letter-u.svg\";\r\n\r\nexport class LoadComponent extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='load-screen'>\r\n                    <svg className='icon' xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 162.55 194.61\">\r\n                        <path d=\"M81.27,144.35a38.41,38.41,0,0,1-9.57-1,12,12,0,0,1-6.33-3.89,17.58,17.58,0,0,1-3.46-8.2,80.05,80.05,0,0,1-1-14.24V2.5H2.5V121.9q0,21.87,6.91,35.54t18,21.43a64.6,64.6,0,0,0,24.89,10.5,139.6,139.6,0,0,0,29,2.73,139.57,139.57,0,0,0,29-2.73,64.67,64.67,0,0,0,24.89-10.5,56.84,56.84,0,0,0,18-21.43q6.92-13.66,6.91-35.54V2.5H101.64V117a79.91,79.91,0,0,1-1,14.24,17.48,17.48,0,0,1-3.45,8.2,12,12,0,0,1-6.33,3.89A38.44,38.44,0,0,1,81.27,144.35Z\"/>\r\n                    </svg>\r\n                    <svg className='circle' xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 62.68 62.37\">\r\n                        <path d=\"M31.34,2.5A28.69,28.69,0,1,0,60.18,31.19,28.68,28.68,0,0,0,31.34,2.5Z\"/>\r\n                    </svg>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport {LoadComponent} from \"./LoadComponent\";\r\n\r\nexport const VER_NUM = 'v1.0.1';\r\n\r\nexport class MainComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='version'>\r\n                    {VER_NUM}\r\n                </div>\r\n\r\n                <LoadComponent />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport {MainComponent} from \"./Components/MainComponent\";\n\nfunction App() {\n  return (\n    <MainComponent />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}